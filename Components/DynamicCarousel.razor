@inherits CarouselBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [Parameter] public required Type ItemType { get; set; }
    [Parameter] public IDictionary<string, object>[]? ItemsParameters { get; set; }

    private DynamicComponent[] carouselItems;

    private int lastSlideIndex = -1;

    protected override void OnInitialized()
    {
        if (ItemsParameters == null || ItemsParameters.Count() == 0)
            return;

        totalNumberOfItems = ItemsParameters.Length;

        carouselItems = new DynamicComponent[totalNumberOfItems];
        Items = new RenderFragment[totalNumberOfItems];
        for (int i = 0; i < totalNumberOfItems; i++)
            Items[i] = CreateItem(i);

        base.OnInitialized();
    }

    private RenderFragment CreateItem(int index)
    {
        if (ItemsParameters == null)
            return @<></>;
        return@<DynamicComponent Type="ItemType" Parameters="ItemsParameters[index]" @ref="carouselItems[index]"></DynamicComponent>;
    }    

    protected override void ScrollTo(int index)
    {
        lastSlideIndex = currentSlide;
        base.ScrollTo(index);
    }

    protected override void OnCarouselFocused()
    {
        base.OnCarouselFocused();
        PlayCurrentSlide();
    }

    private void PlayCurrentSlide()
    {
        if (carouselItems == null || carouselItems.Length == 0 || carouselItems.Length <= currentSlide)
            return;

        (carouselItems[currentSlide].Instance as ICarouselComponent)?.StartRendering();
    }

    protected override void OnItemFocused(int id)
    {
        lastSlideIndex = currentSlide;
        base.OnItemFocused(id);                
        PlayCurrentSlide();
        if (lastSlideIndex != currentSlide && lastSlideIndex >= 0)
            (carouselItems[lastSlideIndex].Instance as ICarouselComponent)?.StopRendering();
    }
}
