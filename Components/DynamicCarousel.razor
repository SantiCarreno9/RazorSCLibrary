@inherits CarouselByScript

@{
    base.BuildRenderTree(__builder);
}

@code {

    [Parameter] public required Type ItemType { get; set; }
    [Parameter] public IDictionary<string, object>[]? ItemsParameters { get; set; }
    [Parameter] public int? IndexToDisplay { get; set; }

    private int currentVisibleItem = 0;
    private Dictionary<int, DynamicComponent> carouselItems = new();
    private RenderFragment[] tempItems;

    private int lastSlideIndex = -1;
    private bool shouldRerender = false;

    protected override void OnInitialized()
    {
        if (ItemsParameters == null || ItemsParameters.Count() == 0)
            return;        

        totalNumberOfItems = ItemsParameters.Length;
        tempItems = new RenderFragment[totalNumberOfItems];
        Items = tempItems;
        base.OnInitialized();
        if (!IndexToDisplay.HasValue || IndexToDisplay == currentIndex)
            OnItemFocused();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (IndexToDisplay.HasValue)
            currentVisibleItem = IndexToDisplay.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (IndexToDisplay.HasValue)
        {
            if (currentVisibleItem != currentIndex)
            {
                shouldRerender = true;
                await ShowItem(currentVisibleItem);
            }
        }        
    }

    private RenderFragment CreateItem(int index)
    {
        if (ItemsParameters == null)
            return @<></>;
        carouselItems.Add(index, null);
        return@<DynamicComponent Type="ItemType" Parameters="ItemsParameters[index]" @ref="carouselItems[index]"></DynamicComponent>;
    }

    protected override async Task ShowItem(int position)
    {
        lastSlideIndex = currentIndex;
        currentVisibleItem = position;
        await base.ShowItem(position);
    }

    protected override void OnItemFocused()
    {
        base.OnItemFocused();
        if (!carouselItems.ContainsKey(currentIndex))
        {
            tempItems[currentIndex] = CreateItem(currentIndex);
            if (shouldRerender)
            {
                StateHasChanged();
                shouldRerender = false;
            }
        }
        else
        {
            if (carouselItems.ContainsKey(currentIndex))
                (carouselItems[currentIndex].Instance as ICarouselComponent)?.StartRendering();
        }

        if (carouselItems.ContainsKey(lastSlideIndex))
        {
            (carouselItems[lastSlideIndex].Instance as ICarouselComponent)?.StopRendering();
            lastSlideIndex = -1;
        }
    }
}
